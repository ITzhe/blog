[{"content":"Redis 持久化方式 Redis 提供了多种不同级别的持久化方式：\nRDB 持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。\rAOF AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。\tRedis 还可以同时使用 AOF 持久化和 RDB 持久化。 在这种情况下， 当 Redis 重启时， 它会优先使用 AOF 文件来还原数据集， 因为 AOF 文件保存的数据集通常比 RDB 文件所保存的数据集更完整。\nRDB 优缺点 优：故障恢复的时候特别快，最大化Redis性能；直接fork一个子进程，之后的所有保存工作全交给子进程；支持的功能更多。\n缺：如果在未保存快照的时候故障，会丢失部分数据；子进程在fork的时候会非常影响性能；可能会造成客户端连接的停顿。\nAOF 优缺点 优：数据相比RDB可能更完整一些，因为是每秒写入一次，最多丢一秒的数据；操作追加到日志文件，可重写； 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小。 （什么是重写：set a 1，set a 2 set a 3，只记录set a 3）\n缺：体积大于RDB，恢复速度慢于RDB\nRrdis 主从原理 1、当从库和主库建立MS关系后，会向主数据库发送PSYNC命令；\r2、主库接收到PSYNC命令后会开始在后台保存快照（RDB持久化过程），并将期间接收到的写请求写到缓存区；\r3、当快照完成后，主Redis会将快照文件和所有缓存的写命令发送给从Redis；\r4、从Redis接收到后，会载入快照文件并且执行收到的缓存的命令；\r5、主Redis每当接收到写命令时就会将命令发送从Redis，从而保证数据的一致；\rRedis 优化 更改端口\nport 6379\t设置密码\nrequirepass XXXXXX\r绑定地址\nbind 10.0.0.10\r后台运行\ndaemonize yes\r日志级别\nloglevel warning\r日志位置\nlogfile \u0026quot;/var/log/redis_6379.log\u0026quot;\r持久化\n建议master关闭，slave开启\nsave 900 1\rsave 300 10\rsave 60 10000 开启只读\nslave-read-only yes\r慢查询\nslowlog-log-slower-than 5000\r最大内存\nmaxmemory 5gb\r数据淘汰机制 volatile-lru：使用LRU算法进行数据淘汰（淘汰上次使用时间最早的，且使用次数最少的key），只淘汰设定了有效期的key\rallkeys-lru：使用LRU算法进行数据淘汰，所有的key都可以被淘汰\rvolatile-random：随机淘汰数据，只淘汰设定了有效期的key\rallkeys-random：随机淘汰数据，所有的key都可以被淘汰\rvolatile-ttl：淘汰剩余有效期最短的key ","date":"2023-03-02T20:52:54+08:00","permalink":"https://caizhe.org/p/redis%E4%BC%98%E5%8C%96/","title":"Redis优化"},{"content":"系统优化 1.精简开机自启动\n2.禁止ROOT远程登录，更改SSH端口，远程登录改为秘钥认证，如果有必要换成VPN内网连接。\n3.根据业务关闭IPtables、关闭Selinux。\n4.更换国内较快的YUM源\n5.调整文件字符集，最好为UTF-8\n7.修改系统登录信息 /etc/issue\n8.时间同步\n9.设置连接终端超时\n10.不要使用IP地址，尽量使用主机名。\n11.锁文件（慎用）\n6.调整文件描述符大小\nvim /etc/security/limits.conf\r* soft nofile 65535\r* hard nofile 65535 内核优化 开启内核转发\nnet.ipv4.ip_forward = 1\r设置timewait的数量，默认180000\nnet.ipve.tcp_max_tw_buckets = 6000\r用来设定允许系统打开的端口范围。\nnet.ipv4.ip_local_port_range = 1024 65000\r设置启用timewait快速回收。\nnet.ipv4.tcp_tw_recycle = 1\r用于设置开启重用，允许将TIME-WAIT sockets重新用于新的TCP连接\nnet.ipv4.tcp_tw_reuse = 1\r开启SYN Cookies，当出现SYN等待队列溢出时，启用cookies进行处理。\nnet.ipv4.tcp_syncookies = 1\r用于调节系统同时发起的tcp连接数，在高并发的请求中，默认的值可能会导致链接超时或者重传，因此，需要结合并发请求数来调节此值。默认值是128\nnet.core.somaxconn = 262144\r当每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许发送到队列的数据包的最大数目。\nnet.core.netdev_max_backlog = 262144\r用于设定系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤立连接将立即被复位并打印出警告信息。这个限制只是为了防止简单的DoS攻击。不能过分依靠这个限制甚至人为减小这个值，更多的情况下应该增加这个值\nnet.ipv4.tcp_max_orphans = 262144\r记录那些尚未收到客户端确认信息的连接请求的最大值。对于有128MB内存的系统而言，此参数的默认值是1024，对小内存的系统则是128\nnet.ipv4.tcp_max_syn_backlog = 262144\r内核放弃连接之前发送SYN+ACK包的数量。\nnet.ipv4.tcp_synack_retries = 1\r在内核放弃建立连接之前发送SYN包的数量。\nnet.ipv4.tcp_syn_retries = 1\r设置套接字保持在FIN-WAIT-2状态的时间。默认值是60秒\nnet.ipv4.tcp_fin_timeout = 1\r当长连接启用的时候，TCP发送长连接消息的频度。默认值是2小时\nnet.ipv4.tcp_keepalive_time = 30\r调整使用swap分区的使用率/百分百。(100-10)90，当内存使用率达到90使用swap，redis服务器建议为0\n/proc/sys/vm/swappiness 10\r这篇文章较短，未来会不断完善，欢迎大家提供建议。\n","date":"2023-03-02T20:49:41+08:00","permalink":"https://caizhe.org/p/linux%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/","title":"linux系统优化"},{"content":"nginx 的优化分为两个小方向：性能优化 \u0026amp; 安全优化\n性能优化 开启gzip压缩\ngzip on;\rgzip_min_length 1k;\rgzip_buffers 4 32k;\rgzip_http_version 1.1;\rgzip_comp_level 2;\rgzip_types text/css text/js text/xml application/javascript;\rgzip_vary on;\r使用expires 缓存\nlocation ~^/(images|javascript|js|css|flash|media|static)/ {\rexpires 30d;\r}\rlocation ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\r{\rexpires 3650d;\r}\r使用epoll模型\nuse epoll;\r配置多个work进程\n与CPU的核数相等 or CPU的核数 X2\r调整当进程的最大连接数\nworker_connections 20480；\r调整进程可打开的的最大文件数\nworker_rlimit_nofile 65535;\r设置连接超时\nkeepalive_timeout 300;\rJAVA应用经量使用长连接、如果是PHP的尽量使用短连接，因为Java应用要消耗的资源和时间要比PHP跟多（具体依然要看业务）\r客户端请求头超时时间/大小\nclient_header_timeout 15s;\tclient_header_buffer_size 10k;\r客户端请求主体超时时间\nclient_header_timeout 15s;\r用户上传大小的限制\nclient_max_body_size 10m;\r开启高效文件传输模式\nsendfile on;\rtcp_nopush on;\raio on;\r为后端代理服务器设置缓冲区\nproxy_buffering on;\rproxy_buffer_size 64k;\rproxy_buffers 4 32k;\rproxy_busy_buffers_size 64k;\rproxy_temp_file_write_size 64k;\r制定客户端的超时时间\nsend_timeout 300s;\r安全优化 隐藏版本号\nserver_tokens off;\r更改默认用户组\nuser nginx;\r静止解析制定目录下的特定文件\nlocation ~ ^/images/.*\\.(php|php5|.sh|.pl|.py)$ { deny all; } 限制及指定IP或IP段访问\nlocation / { deny 192.168.1.1; allow 192.168.1.0/24; deny all; }\r限制非法IP\nif ($remote_addr = 10.0.0.2 ) {\rreturn 403;\r}\r禁止非法域名解析访问\nif （$host !~ caizhe/.org$）{\rreturn 500;\r}\rserver {\rlisten 80 default;\rreturn 500;\r}\r限制访问频率\nhttp {\tlimit_req_zone $binary_remote_addr zone=ttlsa_com:10m rate=1r/s;\rserver {\rlimit_req zone=one burst=5;\r错误页面优雅显示\nerror_page 500 501 502 503 504 https://caizhe.org;\rerror_page 400 403 404 405 408 410 411 412 413 414 415 https://caizhe.org;\r使用普通用户启动nginx\n","date":"2023-03-02T20:46:18+08:00","permalink":"https://caizhe.org/p/nginx%E4%BC%98%E5%8C%96/","title":"Nginx优化"},{"content":"拉取镜像\n1 ctr image pull docker.io/library/nginx:latest 查看容器\nctr image ls -q\r创建容器\nctr c create docker.io/library/nginx:latest nginx\r启动容器\nctr task start -d nginx\r直接启动容器（创建容器+启动容器）\nctr run -d --net-host nginx bash\r查看容器状态\nctr task ls\r进入容器\nctr task exec -t --exec-id 0 nginx /bin/bash\r停止容器\nctr task kill nginx\r暂停容器\nctr task pause nginx\r","date":"2023-03-02T17:44:11+08:00","permalink":"https://caizhe.org/p/containerd%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"Containerd常用命令"},{"content":"1、下载依赖安装包\n1 2 3 wget https://github.com/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz # 如果无法访问github可以使用下面地址 # wget https://download.fastgit.org/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz 2、解压\n1 tar -C / -xzf cri-containerd-cni-1.5.5-linux-amd64.tar.gz 3、添加配置文件：\n默认配置文件为 /etc/containerd/config.toml，我们可以通过如下所示的命令生成\n1 2 mkdir -p /etc/containerd containerd config default \u0026gt; /etc/containerd/config.toml 4、启动containerd\n1 systemctl enable containerd --now 5、验证containerd\n1 2 3 4 5 6 7 8 9 10 # ctr version Client: Version: v1.5.5 Revision: 72cec4be58a9eb6b2910f5d10f1c01ca47d231c0 Go version: go1.16.6 Server: Version: v1.5.5 Revision: 72cec4be58a9eb6b2910f5d10f1c01ca47d231c0 UUID: 38613830-5cd0-4bc4-81b4-2bcdced721d3 ","date":"2023-03-01T17:44:11+08:00","permalink":"https://caizhe.org/p/containerd%E5%AE%89%E8%A3%85/","title":"Containerd安装"},{"content":"1、首先需要关闭远程仓库的分支保护，允许强制推送：\n\u0026ldquo;Settings\u0026rdquo; -\u0026gt; \u0026ldquo;Repository\u0026rdquo; -\u0026gt; scroll down to \u0026ldquo;Protected branches\u0026rdquo;.\n2、克隆项目,拉取所有分支：\n1 2 3 4 5 git clone xxx # 默认拉取master分支 cd xx #进入拉取的文件夹 git branch -r | grep -v \u0026#39;\\-\u0026gt;\u0026#39; | while read remote; do git branch --track \u0026#34;${remote#origin/}\u0026#34; \u0026#34;$remote\u0026#34;; done git fetch --all git pull --all 3、查找大文件（将最大的10个文件查询下来）\n1 git rev-list --objects --all | grep \u0026#34;$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -10 | awk \u0026#39;{print$1}\u0026#39;)\u0026#34; 4、清理查找的大文件（一次只能处理一个文件/文件夹）：\n1 git filter-branch --force --index-filter \u0026#39;git rm -rf --cached --ignore-unmatch 目录/文件\u0026#39; --prune-empty --tag-name-filter cat -- --all 5、删除并回收空间\n1 2 3 4 5 git for-each-ref --format=\u0026#39;delete %(refname)\u0026#39; refs/original | git update-ref --stdin rm -rf .git/refs/original/ git reflog expire --expire=now --all git gc --prune=now git gc --aggressive --prune=now 6、推送远程仓库：\n1 2 git push origin --force --all git remote prune origin 然后其他人重新克隆项目即可\n参考链接：https://www.msnao.com/2021/06/15/5031.html\n","date":"2023-03-01T17:44:11+08:00","permalink":"https://caizhe.org/p/gitlab%E5%A4%A7%E6%96%87%E4%BB%B6%E6%B8%85%E7%90%86/","title":"Gitlab大文件清理"}]